---
- name: Install or update firewall related packages
  ansible.builtin.apt:
    name:
      - conntrack
      - iptables
      - iptables-persistent

- name: Create initial firewall script
  ansible.builtin.template:
    src: "{{ 'firewall-ip' + item + '.sh.j2' }}"
    dest: "{{ '/root/firewall-ip' + item + '.sh' }}"
    mode: "0700"
  with_items:
    - "v4"
    - "v6"

- name: Start firewall
  ansible.builtin.shell: "{{ '/root/firewall-ip' + item + '.sh' }} start"
  with_items:
    - "v4"
    - "v6"

- name: Prereoute incoming ipv6 traffic
  module_defaults:
    ansible.builtin.iptables:
      ip_version: ipv6
      chain: PREROUTING
      table: nat
      destination: "! {{ ansible_facts.default_ipv6.address }}"
      to_destination: "{{ ansible_facts.default_ipv6.address }}"
      jump: DNAT
  block:
    - name: Flush ipv6 nat table
      ansible.builtin.iptables:
        table: nat
        flush: yes
    - name: DNAT incoming TCP v6 except obfs4 port
      when: obfs4_port is defined
      ansible.builtin.iptables:
        protocol: tcp
        destination_ports: "1:{{ obfs4_port - 1 }},{{ obfs4_port + 1 }}:65535"
    - name: DNAT incoming TCP v6
      when: obfs4_port is not defined
      ansible.builtin.iptables:
        protocol: tcp
    - name: DNAT incoming non-TCP v6
      ansible.builtin.iptables:
        protocol: "{{ item }}"
      with_items:
        - ipv6-icmp
        - udp
        - udplite

- name: Enable Prometheus to scrape metrics
  when: prometheus_server is defined
  ansible.builtin.iptables:
    chain: INPUT
    protocol: tcp
    source: "{{ prometheus_server }}"
    destination_port: 9100
    syn: match
    jump: ACCEPT

- name: Save iptables state
  community.general.iptables_state:
    ip_version: "{{ 'ip' + item }}"
    state: saved
    path: "{{ '/etc/iptables/rules.' + item }}"
  with_items:
    - "v4"
    - "v6"
