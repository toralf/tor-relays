---
- name: Generate a pseudo.randomly choosen ipv6 address
  failed_when: ansible_facts.default_ipv6.prefix != "64"
  vars:
    _ipv6_prefix: "{{ (ansible_facts.default_ipv6.address | split(':'))[:4] | join(':') }}"
    _a: "{{ range(0, 65535) | random(seed=seed_address + inventory_hostname + ansible_facts.default_ipv4.address + 'A' + _ipv6_prefix) }}"
    _b: "{{ range(0, 65535) | random(seed=seed_address + inventory_hostname + ansible_facts.default_ipv4.address + 'B' + _ipv6_prefix) }}"
    _c: "{{ range(0, 65535) | random(seed=seed_address + inventory_hostname + ansible_facts.default_ipv4.address + 'C' + _ipv6_prefix) }}"
    _d: "{{ range(0, 65535) | random(seed=seed_address + inventory_hostname + ansible_facts.default_ipv4.address + 'D' + _ipv6_prefix) }}"
    _ipv6_new: "{{ _ipv6_prefix }}:{{ '%x' % (_a | int) }}:{{ '%x' % (_b | int) }}:{{ '%x' % (_c | int) }}:{{ '%x' % (_d | int) }}"
  ansible.builtin.template:
    src: 50-cloud-init.j2
    dest: /etc/network/interfaces.d/50-cloud-init
  register: _cloud_init

- name: Restart network service
  ansible.builtin.systemd:
    name: "networking"
    state: restarted
    daemon_reload: true
    enabled: true
  when: _cloud_init.changed

- name: Deactivate the Hetzner network configurator
  ansible.builtin.copy:
    src: 00_debian.cfg
    dest: /etc/cloud/cloud.cfg.d/

- name: Get ipv6
  changed_when: false
  ansible.builtin.command: ip -6 a
  register: _result
  failed_when: _result.stderr_lines | length > 0

- name: Gather facts again
  when: _cloud_init.changed
  ansible.builtin.setup:
    gather_subset: "{{ facts_subset }}"

- name: Bail out
  when: ansible_facts.default_ipv6.address is match('fe80::')
  failed_when: ansible_facts.default_ipv6.address is match('fe80::')
  ansible.builtin.debug:
    var: _result.stdout_lines
