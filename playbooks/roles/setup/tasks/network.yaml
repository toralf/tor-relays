---
# goal:     enlarge the cost of a network scanner for IPv6 to scan for an open obfsv4 port
# solution:
#           - randomize the global ipv6 address
#           - route all possible ipv6 adresses to this global one if the dst port is *not* the obfsv4 port
- name: Gather current ipv6
  ansible.builtin.setup:
    gather_subset:
      - "!all"
      - "all_ipv6_addresses"

- name: Set ipv6 prefix
  ansible.builtin.set_fact:
    _ipv6_prefix: "{{ (ansible_facts.default_ipv6.address | split(':'))[:4] | join(':') }}"
  failed_when: _ipv6_prefix is match("fe80:")

- name: Compile global scope ipv6 address
  ansible.builtin.set_fact:
    _ipv6_new: "{{ _ipv6_prefix }}:{{ '%x' % (_a | int) }}:{{ '%x' % (_b | int) }}:{{ '%x' % (_c | int) }}:{{ '%x' % (_d | int) }}"
  vars:
    _a: "{{ range(0,65535) | random(seed=seed_local + ansible_facts.hostname + ansible_facts.default_ipv4.address + 'A' + _ipv6_prefix) }}"
    _b: "{{ range(0,65535) | random(seed=seed_local + ansible_facts.hostname + ansible_facts.default_ipv4.address + 'B' + _ipv6_prefix) }}"
    _c: "{{ range(0,65535) | random(seed=seed_local + ansible_facts.hostname + ansible_facts.default_ipv4.address + 'C' + _ipv6_prefix) }}"
    _d: "{{ range(0,65535) | random(seed=seed_local + ansible_facts.hostname + ansible_facts.default_ipv4.address + 'D' + _ipv6_prefix) }}"

- name: Ensure that Hetzner network configurator is deactivated
  ansible.builtin.copy:
    src: 00_debian.cfg
    dest: /etc/cloud/cloud.cfg.d/
  when: ansible_facts.bios_vendor == 'Hetzner'

- name: Ensure global scope ipv6 is configured to the new desired one
  ansible.builtin.template:
    src: 50-cloud-init.j2
    dest: /etc/network/interfaces.d/50-cloud-init
  register: ipv6_state
  when: ansible_facts.bios_vendor == 'Hetzner'

- name: Use new ipv6 address in network filtering
  module_defaults:
    ansible.builtin.iptables:
      ip_version: ipv6
      table: nat
      chain: PREROUTING
  block:
    - name: Restart network service
      ansible.builtin.systemd:
        name: "networking"
        state: restarted
        daemon_reload: true
        enabled: yes
    - name: Gather ipv6 again
      ansible.builtin.setup:
        gather_subset:
          - "!all"
          - "all_ipv6_addresses"
    - name: Flush table nat of chain PREROUTING
      ansible.builtin.iptables:
        flush: true
    - name: ACCEPT incoming TCP v6 to the global scope ipv6 address
      ansible.builtin.iptables:
        protocol: tcp
        destination: "{{ _ipv6_new }}"
        jump: ACCEPT
    - name: DNAT incoming TCP v6 to the global scope ipv6 address (if dst port is not the obfsv4 port)
      ansible.builtin.iptables:
        protocol: tcp
        destination: "! {{ _ipv6_new }}"
        destination_ports: "1:{{ obfs4_port - 1 }},{{ obfs4_port + 1 }}:65535"
        jump: DNAT
        to_destination: "{{ _ipv6_new }}"
    - name: Save new ip6tables state
      community.general.iptables_state:
        ip_version: ipv6
        state: saved
        path: /etc/iptables/rules.v6
  when: ipv6_state.changed
