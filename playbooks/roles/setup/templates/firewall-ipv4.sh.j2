#!/bin/bash
#set -x
# {{ ansible_managed }}

function clearAll() {
  $ipt -P INPUT ACCEPT
  $ipt -P OUTPUT ACCEPT

  for table in filter nat; do
    $ipt -F -t $table
    $ipt -X -t $table
    $ipt -Z -t $table
  done
}

function addRules() {
  $ipt -P INPUT DROP
  $ipt -P OUTPUT ACCEPT

  # allow loopback
  $ipt -A INPUT --in-interface lo -m comment --comment "$(date -R)" -j ACCEPT

  # make sure NEW incoming tcp connections are SYN packets
  $ipt -A INPUT -p tcp ! --syn -m state --state NEW -j DROP
  $ipt -A INPUT -m conntrack --ctstate INVALID -j DROP

  # do not touch established connections
  $ipt -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT

  # ssh
  $ipt -A INPUT -p tcp --dport 22 --syn -j ACCEPT

  # ratelimit ICMP echo
  $ipt -A INPUT -p icmp --icmp-type echo-request -m limit --limit 6/s -j ACCEPT
  $ipt -A INPUT -p icmp --icmp-type echo-request -j DROP

{% if obfs4_port is defined %}
  # obfs4 port
  $ipt -A INPUT -p tcp --dst {{ ansible_facts.default_ipv4.address }} --dport {{ obfs4_port }} --syn -m hashlimit --hashlimit-mode srcip,dstport --hashlimit-srcmask 32 --hashlimit-name tor-ddos-{{ obfs4_port }} --hashlimit-above 10/minute --hashlimit-burst 1 --hashlimit-htable-expire $((2 * 60 * 1000)) -j DROP
{%endif %}

{% if metrics_port is defined and metrics_port != "" and prometheus_server is defined and prometheus_server != "" %}
  # Prometheus scrape metrics
  $ipt -A INPUT -p tcp --src {{ prometheus_server }} --dst {{ ansible_facts.default_ipv4.address }} --dport {{ metrics_port }} --syn -j ACCEPT
{%endif %}
  # any additional ports
{% for __i in additional_ports %}
{% if ',' in __i or ':' in __i %}
  $ipt -A INPUT -p tcp --match multiport --dports {{ __i }} --syn -j ACCEPT
{% else %}
  $ipt -A INPUT -p tcp --dport {{ __i }} --syn -j ACCEPT
{% endif %}
{% endfor %}
}

#######################################################################
set -euf

ipt=/sbin/iptables

if [[ $1 == "start" ]]; then
  clearAll
  addRules
else
  $1
fi
