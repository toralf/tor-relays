---
- name: Install/Update config software
  ansible.builtin.apt:
    name:
      - cron
      - htop
      - logrotate
      - minicoredumper

- name: Set PATH in crontab
  ansible.builtin.cron:
    name: PATH
    value: /usr/sbin:/usr/bin:/sbin/:/bin
    env: true

- name: Set SHELL in crontab
  ansible.builtin.cron:
    name: SHELL
    value: /bin/bash
    env: true

- name: Sysctl config
  ansible.builtin.copy:
    src: 20tor-system.conf
    dest: /etc/sysctl.d/
  register: _sysctl_state

- name: Ensure sysctl is up to date
  when: _sysctl_state.changed
  changed_when: true
  ansible.builtin.command:
    cmd: sysctl --system

- name: Tweak readline
  ansible.builtin.lineinfile:
    line: set enable-bracketed-paste off
    path: /root/.inputrc

- name: Htop config
  ansible.builtin.copy:
    src: htoprc
    dest: /root/.config/htop/

- name: Editor config
  ansible.builtin.copy:
    src: .selected_editor
    dest: /root/

- name: Set certain common sysctl values
  ansible.posix.sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    sysctl_file: /etc/sysctl.d/21common.conf
    sysctl_set: true
  loop:
    - { name: kernel.sysrq, value: 0 }
    - { name: net.ipv4.tcp_fin_timeout, value: 10 }
    - { name: net.ipv4.tcp_notsent_lowat, value: 131072 }
    - { name: net.ipv6.ip_nonlocal_bind, value: 1 }

- name: Ensure kernel crash dumps are made using minicoredumper
  ansible.builtin.cron:
    name: core debug files
    special_time: reboot
    job: >-
      echo '|/usr/sbin/minicoredumper \%P \%u \%g \%s \%t \%h \%e' > /proc/sys/kernel/core_pattern;
      echo 0x7fffffff > /proc/sys/kernel/core_pipe_limit

- name: Ensure system mailfile is not too big
  ansible.builtin.cron:
    name: regulary truncate system mail file
    special_time: daily
    job: >-
      while [[ $(wc -l </var/mail/mail) -gt 10000 ]] || ! head -n 1 /var/mail/mail | grep -q '^From ';
      do
      sed -i -e "1d" /var/mail/mail;
      done

- name: Configure journalctl max size
  ansible.builtin.lineinfile:
    line: "SystemMaxUse=100M"
    path: /etc/systemd/journald.conf
    regexp: "^[#]*SystemMaxUse="
  notify: Restart systemd-journald

- name: Ensure that logrotate systemd override directory does exist
  ansible.builtin.file:
    path: /etc/systemd/system/logrotate.timer.d/
    state: directory
    mode: "0755"
  notify: Reload systemd

- name: Add logrotate systemd override config
  ansible.builtin.template:
    src: logrotate.override.conf.j2
    dest: /etc/systemd/system/logrotate.timer.d/override.conf
  notify: Reload systemd

# both nginx and Tor refuses to start, if IPv6 is not up
- name: Ensure that Networkd wait online systemd override dir exists
  ansible.builtin.file:
    path: /etc/systemd/system/systemd-networkd-wait-online.service.d/
    state: directory
    mode: "0755"

- name: Add Networkd wait online systemd override
  ansible.builtin.template:
    src: networkd-wait-online.override.conf.j2
    dest: /etc/systemd/system/systemd-networkd-wait-online.service.d/override.conf
  notify:
    - Reload systemd

- name: No apport
  when: ansible_facts.distribution in ('Ubuntu')
  block:
    - name: Disable apport service
      ansible.builtin.systemd_service:
        name: apport
        enabled: false
        state: stopped
        no_block: true

    - name: Disable apport autostart
      ansible.builtin.lineinfile:
        line: "enabled=0"
        path: /etc/default/apport
        regexp: "^enabled="

- name: Create swapfile for systems with small RAM
  when: ansible_facts.memtotal_mb < 2048 and (kernel_build_from_source or tor_port is defined)
  ansible.builtin.shell:
    cmd: |-
      set -euf

      fallocate -l 2G /swapfile
      chmod 600 /swapfile
      mkswap /swapfile
      if ! grep -q "^/swapfile " /etc/fstab; then
        echo "/swapfile  none  swap  defaults  0  0" >>/etc/fstab
      fi
      swapon /swapfile
    creates: /swapfile
