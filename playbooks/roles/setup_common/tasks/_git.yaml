---
- name: Check for a new clone "{{ _repo_dir }}"
  block:
    - name: Check for a new clone "{{ _repo_dir }}"
      ansible.builtin.git:
        repo: "{{ _git_repo_url }}"
        dest: "{{ _repo_dir }}"
        clone: false
        update: false
      register: __new_clone
  rescue:
    - name: Wipe b0rken "{{ _repo_dir }}"
      ansible.builtin.file:
        state: absent
        path: "{{ _repo_dir }}"

- name: Throttle Git
  throttle: 16
  block:
    - name: New clone "{{ _repo_dir }}"
      throttle: 6
      when: __new_clone.before == "null"
      block:
        - name: Shallow clone "{{ _repo_dir }}"
          ansible.builtin.git:
            repo: "{{ _git_repo_url }}"
            dest: "{{ _repo_dir }}"
            version: "{{ _git_version }}"
            force: true
            depth: 1
            single_branch: true
          register: __shallow

        - name: Single branch "{{ _repo_dir }}"
          ansible.builtin.git:
            repo: "{{ _git_repo_url }}"
            dest: "{{ _repo_dir }}"
            version: "{{ _git_version }}"
            force: true
            single_branch: true
          register: __branch

    - name: Update "{{ _repo_dir }}"
      ansible.builtin.git:
        repo: "{{ _git_repo_url }}"
        dest: "{{ _repo_dir }}"
        version: "{{ _git_version }}"
        force: true
        clone: false
      register: __updated

    - name: Apply patches "{{ _repo_dir }}"
      changed_when: __patched.stdout_lines is search('patching file ')
      ansible.builtin.shell:
        cmd: |-
          set -euf

          rm -f tmp.patch
          curl -s {{ item }} -o tmp.patch
          patch -p 1 <tmp.patch
          rm tmp.patch
        chdir: "{{ _repo_dir }}"
      loop: "{{ _git_patches }}"
      register: __patched

- name: Remove untracked files "{{ _repo_dir }}"
  changed_when: __cleaned.stdout
  ansible.builtin.command:
    cmd: git clean --force
    chdir: "{{ _repo_dir }}"
  register: __cleaned

- name: Get update status "{{ _repo_dir }}"
  ansible.builtin.set_fact:
    _git_repo_changed: "{{
      __shallow is defined and __shallow.changed or
      __branch is defined and __branch.changed or
      __updated.changed or
      __patched.changed }}"

- name: Get current HEAD commit id "{{ _repo_dir }}"
  ansible.builtin.git:
    repo: "{{ _git_repo_url }}"
    dest: "{{ _repo_dir }}"
    clone: false
    update: false
  register: _git_head
