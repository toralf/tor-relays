---
- name: Install or update firewall software
  ansible.builtin.apt:
    name:
      - conntrack
      - iptables

- name: Check if a dedicate DDoS solution is in place
  changed_when: false
  ansible.builtin.stat:
    path: /root/ipv4-rules.sh
  register: _ddos_solution

- name: Firewall
  when: not _ddos_solution.stat.exists
  block:
    - name: Install or update firewall software
      ansible.builtin.apt:
        name:
          - iptables-persistent

    - name: Set certain sysctl values for native firewall
      vars:
        _max: "{{ (ansible_facts.memtotal_mb < 1024) | ternary((2**16) | int, (2**18) | int) }}"
      ansible.posix.sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        sysctl_file: /etc/sysctl.d/21firewall.conf
        sysctl_set: true
      loop:
        - { name: net.core.somaxconn, value: "{{ _max }}" }
        - { name: net.ipv4.tcp_max_syn_backlog, value: "{{ _max }}" }

    - name: Create firewall script
      ansible.builtin.template:
        src: "firewall-ip{{ item }}.sh.j2"
        dest: "/root/firewall-ip{{ item }}.sh"
        mode: "0700"
      with_items:
        - v4
        - v6
      register: _fw_scripts

    - name: Save iptables state before setup
      community.general.iptables_state:
        ip_version: "ip{{ item }}"
        state: saved
        path: "/etc/iptables/rules.{{ item }}"
      with_items:
        - v4
        - v6
      register: _fw_old

    - name: Reset firewall
      when: _fw_scripts.changed or _fw_old.changed
      block:
        - name: Start firewall
          changed_when: true
          ansible.builtin.command:
            cmd: "/root/firewall-ip{{ item }}.sh start"
          with_items:
            - v4
            - v6

        - name: Save iptables state after setup
          community.general.iptables_state:
            ip_version: "ip{{ item }}"
            state: saved
            path: "/etc/iptables/rules.{{ item }}"
          with_items:
            - v4
            - v6
