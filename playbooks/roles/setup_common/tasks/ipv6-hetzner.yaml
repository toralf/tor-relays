---
- name: Generate a pseudo-random choosen ipv6 address
  failed_when: ansible_facts.default_ipv6.prefix != "64"
  vars:
    _ipv6_prefix: "{{ (ansible_facts.default_ipv6.address | split(':'))[:4] | join(':') }}"
    _a: "{{ range(0, 65535) | random(seed=seed_address + inventory_hostname + ansible_facts.default_ipv4.address + 'A' + _ipv6_prefix) }}"
    _b: "{{ range(0, 65535) | random(seed=seed_address + inventory_hostname + ansible_facts.default_ipv4.address + 'B' + _ipv6_prefix) }}"
    _c: "{{ range(0, 65535) | random(seed=seed_address + inventory_hostname + ansible_facts.default_ipv4.address + 'C' + _ipv6_prefix) }}"
    _d: "{{ range(0, 65535) | random(seed=seed_address + inventory_hostname + ansible_facts.default_ipv4.address + 'D' + _ipv6_prefix) }}"
    _ipv6_new: "{{ _ipv6_prefix }}:{{ '%x' % (_a | int) }}:{{ '%x' % (_b | int) }}:{{ '%x' % (_c | int) }}:{{ '%x' % (_d | int) }}"
  ansible.builtin.template:
    src: 50-cloud-init.j2
    dest: /etc/network/interfaces.d/50-cloud-init
  register: _cloud_init

- name: Deactivate the Hetzner network configurator
  ansible.builtin.copy:
    src: 00_debian.cfg
    dest: /etc/cloud/cloud.cfg.d/

- name: Restart network service
  when: _cloud_init.changed
  ansible.builtin.systemd_service:
    name: networking
    state: restarted

- name: Check that ipv6 is up again
  changed_when: _ip6_up.rc == 42
  failed_when: (_ip6_up.rc != 0) and (_ip6_up.rc != 42)
  ansible.builtin.shell:
    cmd: |-
      rc=0
      while ip -6 a | grep -q ' tentative'; do
        rc=42
        sleep 1
      done
      exit $rc
  register: _ip6_up

- name: Gather ipv6 facts
  when: _cloud_init.changed
  ansible.builtin.setup:
    gather_subset:
      - "default_ipv6"
