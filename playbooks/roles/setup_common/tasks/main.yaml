---
- name: Gather facts
  ansible.builtin.setup:
    gather_subset: "{{ facts_subset }}"
  tags:
    - facts

- name: Validate
  ansible.builtin.import_tasks: validate.yaml
  tags:
    - validate

- name: Main
  module_defaults:
    ansible.builtin.apt:
      autoclean: true
      autoremove: true
      cache_valid_time: 600
      purge: true
      state: latest
    ansible.builtin.apt_repository:
      update_cache: false
    ansible.builtin.copy:
      owner: root
      group: root
      mode: "0644"
    ansible.builtin.cron:
      backup: true
    ansible.builtin.file:
      owner: root
      group: root
      mode: "0644"
    ansible.builtin.lineinfile:
      create: true
      owner: root
      group: root
      mode: "0644"
    ansible.builtin.stat:
      get_attributes: false
      get_checksum: false
      get_mime: false
    ansible.builtin.systemd_service:
      daemon_reload: true
      enabled: true
    ansible.builtin.template:
      owner: root
      group: root
      mode: "0644"
  block:
    - name: Base
      ansible.builtin.import_tasks: base.yaml
      tags:
        - base

    - name: Update
      ansible.builtin.import_tasks: update.yaml
      tags:
        - update

    - name: IPv6
      tags:
        - ipv6
      block:
        - name: IPv6 Hetzner
          when: ansible_facts.system_vendor == 'Hetzner' and ansible_facts.distribution == 'Debian'
          ansible.builtin.import_tasks: ipv6-hetzner.yaml

        - name: IPv6 IONOS
          when: ansible_facts.system_vendor == 'QEMU'
          ansible.builtin.import_tasks: ipv6-ionos.yaml

        - name: Ensure Ipv6 address is global scope
          failed_when: ansible_facts.default_ipv6.address is match('fe80::')
          ansible.builtin.debug:
            var: ansible_facts.default_ipv6
            verbosity: 1

    - name: Firewall
      ansible.builtin.import_tasks: firewall.yaml
      tags:
        - firewall

    - name: Ensure desired distribution kernel is installed
      when: ansible_facts.distribution == 'Debian'
      ansible.builtin.import_tasks: kernel-dist.yaml
      tags:
        - kernel

    - name: Check if reboot is needed
      ansible.builtin.import_tasks: reboot.yaml

    - name: Ensure scheduled reboot/restart is made
      ansible.builtin.meta: flush_handlers

    - name: Build self-compiled kernel
      when: kernel_git_version
      ansible.builtin.import_tasks: kernel-src.yaml
      tags:
        - kernel

    - name: Metrics
      when: metrics_port
      ansible.builtin.import_tasks: metrics.yaml
      tags:
        - metrics

    - name: Work on running kernel build job
      tags:
        - kernel
      when: _kernel_build.changed
      block:
        - name: Ensure kernel build finished
          when: not fire_and_forget
          ansible.builtin.async_status:
            jid: "{{ _kernel_build.ansible_job_id }}"
          register: _job_result
          until: _job_result.finished
          retries: 120
          delay: 30
          notify: "Reboot system"

        - name: Cleanup kernel build async job file
          ansible.builtin.async_status:
            jid: "{{ _kernel_build.ansible_job_id }}"
            mode: cleanup

    # Let the first kernel build succeed and the system been rebooted
    # before Tor or Snowflake is started for the very first time
    - name: Test at first Kernel build
      ansible.builtin.set_fact:
        _first_kernel_build_in_progress: "{{ (_ansible_tmp.changed and fire_and_forget and _kernel_build.changed) | bool }}"

    - name: Check if reboot is needed
      ansible.builtin.import_tasks: reboot.yaml
      tags:
        - reboot

    - name: Flush common handlers before finalizing
      ansible.builtin.meta: flush_handlers

    - name: Configure auto update
      ansible.builtin.import_tasks: auto-update.yaml
      tags:
        - auto-update

    - name: Run a custom command
      when: custom_command
      ansible.builtin.import_tasks: custom-command.yaml
      tags:
        - custom-command
