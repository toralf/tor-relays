---
- name: Check for a known artefact
  delegate_to: localhost
  throttle: 1
  ansible.builtin.lineinfile:
    line: "{{ item.checksum }}"
    path: "{{ tmp_dir }}/artefact.log"
  register: _known

- name: Work on new artefact
  when: _known.changed
  vars:
    _local_fname: "{{ tmp_dir }}/{{ item.checksum }}"
  block:
    - name: Fetch
      throttle: 1
      ansible.builtin.fetch:
        src: "{{ item.path }}"
        dest: "{{ _local_fname }}"

    - name: Inspect artefact mime type
      delegate_to: localhost
      throttle: 1
      changed_when: false
      ansible.builtin.command:
        cmd: >-
          file {{ _local_fname }}
      register: _mimetype

    - name: Print out artefact file mime type
      changed_when: true
      ansible.builtin.debug:
        var: _mimetype.stdout_lines

    - name: External script for artefact
      when: artefact_script
      block:
        - name: Run script for artefact
          delegate_to: localhost
          throttle: 1
          changed_when: _script.stdout or _script.stderr
          ansible.builtin.shell: # noqa: command-instead-of-shell
            cmd: >-
              {{ artefact_script }} {{ _local_fname }}
          register: _script

      always:
        - name: Script stdout for artefact
          when: _script.stdout
          changed_when: true
          ansible.builtin.debug:
            var: _script.stdout_lines

        - name: Script stderr for artefact
          when: _script.stderr
          changed_when: true
          ansible.builtin.debug:
            var: _script.stderr_lines

  rescue:
    - name: Reset known state of artefact
      delegate_to: localhost
      throttle: 1
      ansible.builtin.lineinfile:
        line: "{{ item.checksum }}"
        path: "{{ tmp_dir }}/artefact.log"
        state: absent

  always:
    - name: Cleanup artefact
      delegate_to: localhost
      throttle: 1
      when: artefact_cleanup
      ansible.builtin.file:
        path: "{{ _local_fname }}"
        state: absent
