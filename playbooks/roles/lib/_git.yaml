---
- name: Git
  environment: "{{ git_environment | default({}) }}"
  module_defaults:
    ansible.builtin.git:
      repo: "{{ _git_repo_url }}"
      dest: "{{ _repo_dir }}"
  block:
    - name: Git stat "{{ _repo_dir }}"
      ansible.builtin.git:
        clone: false
        update: false
      register: __repo

    - name: Git clone/update
      throttle: 16
      block:
        - name: Git clone "{{ _repo_dir }}"
          when: __repo.before == None
          ansible.builtin.git:
            version: "{{ _git_version }}"

        - name: Git update "{{ _repo_dir }}"
          ansible.builtin.git:
            version: "{{ _git_version }}"
            force: true
          register: __updated

    - name: Get commit id "{{ _repo_dir }}"
      ansible.builtin.git:
        clone: false
        update: false
      register: _git_head

- name: Git clean "{{ _repo_dir }}"
  changed_when: __cleaned.stdout
  ansible.builtin.command:
    cmd: git clean --force -d
    chdir: "{{ _repo_dir }}"
  register: __cleaned

# must be after git clean
- name: Git patch "{{ _repo_dir }}"
  throttle: 16
  changed_when: __patched.stdout_lines is search('patching file ')
  ansible.builtin.shell:
    cmd: |-
      set -euf

      rm -f tmp.patch
      curl -s {{ item }} -o tmp.patch
      patch -p 1 --forward -i tmp.patch
      rm tmp.patch
    chdir: "{{ _repo_dir }}"
  loop: "{{ _git_patches }}"
  register: __patched

- name: Git repo changed "{{ _repo_dir }}"
  ansible.builtin.set_fact:
    _git_repo_changed: "{{  __repo.changed or __repo.before == None or
      __updated.changed or __cleaned.changed or __patched.changed or
      force_rebuild is defined and force_rebuild | bool }}"
