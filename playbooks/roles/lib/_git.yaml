---
- name: Git remove "{{ _repo_dir }}"
  when: git_clone_from_scratch is defined and git_clone_from_scratch | bool
  ansible.builtin.file:
    path: "{{ _repo_dir }}"
    state: absent

- name: Git stat "{{ _repo_dir }}"
  ansible.builtin.git:
    repo: "{{ _git_repo_url }}"
    dest: "{{ _repo_dir }}"
    clone: false
    update: false
  register: __repo

- name: Git
  throttle: 16
  block:
    - name: Git clone "{{ _repo_dir }}"
      when: __repo.before == None
      throttle: 2
      ansible.builtin.git:
        repo: "{{ _git_repo_url }}"
        dest: "{{ _repo_dir }}"
        version: "{{ _git_version }}"

    - name: Git update "{{ _repo_dir }}"
      ansible.builtin.git:
        repo: "{{ _git_repo_url }}"
        dest: "{{ _repo_dir }}"
        version: "{{ _git_version }}"
        force: true
      register: __updated

    - name: Git clean "{{ _repo_dir }}"
      changed_when: __cleaned.stdout
      ansible.builtin.command:
        cmd: git clean --force
        chdir: "{{ _repo_dir }}"
      register: __cleaned

    - name: Git patch "{{ _repo_dir }}"
      changed_when: __patched.stdout_lines is search('patching file ')
      ansible.builtin.shell:
        cmd: |-
          set -euf

          rm -f tmp.patch
          curl -s {{ item }} -o tmp.patch
          patch -p 1 <tmp.patch
          rm tmp.patch
        chdir: "{{ _repo_dir }}"
      loop: "{{ _git_patches }}"
      register: __patched

- name: Git repo changed "{{ _repo_dir }}"
  ansible.builtin.set_fact:
    _git_repo_changed: "{{  __repo.changed or __repo.before == None or
      __updated.changed or __cleaned.changed or __patched.changed or
      force_rebuild is defined and force_rebuild | bool }}"
